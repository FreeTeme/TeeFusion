from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import asyncio
import config
import keyboard
from aiogram import Router
import requests

router=Router()
bot = Bot(token=config.TOKEN)



# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(CommandStart())
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
    try:
        response = requests.post(f'http://your-api-url.com/users', json={ # —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –∏ —Å–æ—Ç–∞–≤–∏—Ç—å –∞–ø–∏ users
            'user_id': user_id,
            'name': username,
            'balance': 5  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        })

        if response.status_code == 201:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç TeeFision, {username}!", reply_markup=keyboard.glav_ru)
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query

@router.callback_query(lambda query: query.data == 'help_ru')
async def help_handler(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer("–ü–æ—è–≤–∏–ª—Å—è –≤–æ–ø—Ä–æ—Å?\n–°–≤—è–∂–∏—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @Vlad_Tichonenko", reply_markup=keyboard.Back)

@router.callback_query(lambda query: query.data == 'back')
async def back_handler(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.glav_ru)

@router.callback_query(lambda query: query.data == 'chat_ru')
async def chat_handler(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer("–°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —á–∞—Ç–æ–≤ üìù\n https://t.me/BelarusTON \n https://t.me/ITtbcstudio", reply_markup=keyboard.Back)

@router.callback_query(lambda query: query.data == 'about')
async def about_handler(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer("TeeFision - —ç—Ç–æ ...", reply_markup=keyboard.Back)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command(commands=['admin']))
async def admin_handler(message: types.Message):
    # –°—á—ë—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    count = 0  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    if message.from_user.id in [765843635, 165566970, 6850731097]:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüí° [{count}]", callback_data='note')],
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—èÔ∏è", url='https://example.com')]
        ])

        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}, \n–≤ –ø–∞–Ω–µ–ª—å –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω–∞ü¶∏",
            reply_markup=admin_keyboard
        )
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–æ–º ‚ùå")

@router.callback_query(lambda query: query.data == 'note')
async def about_handler(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
#     –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await callback_query.bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=keyboard.Back)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
